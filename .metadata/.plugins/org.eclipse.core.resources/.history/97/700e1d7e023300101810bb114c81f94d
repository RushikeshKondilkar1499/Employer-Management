package com.rushi.EmployerManagement.Model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Positive;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "Emp_stage")
public class EmployerStage {
	
	@Id
	@Pattern(regexp = "^EM.*", message = "Value must start with 'EM'")
	private String applicationId;
	
	@NotBlank(message = "Application type can not be blank")
	private ApplicationType applicationType;
  
	@NotEmpty(message = "Employee id can not be empty")
	private String empId;

	@NotEmpty(message = "Employee name can not be empty")
	private String empName;

	@Enumerated(EnumType.STRING) // Store enum as VARCHAR
	@NotNull(message="Employee type cannot be null")
	@Column(nullable = false)
	private EmployerType employerType;
	
	@NotNull(message="Master code can not be null")
	@Positive(message = "master code can not be negative")
	private Integer masterCode;
	
	@NotNull(message="Subisdary code can not be null")
	@Positive(message = "Subisdary code can not be negative")
	private Integer subsidaryCode;
	
	@NotBlank(message="Registration id can not be blank")
	@Positive(message = "Registration id can not be negative")
	@Size(max = 6, message="Registration id must be six digit. Append zeros if it is not 6 digit")
	private String registrationId;
	
	@Enumerated(EnumType.STRING)
	@NotBlank(message = "Emplyer Category can not be blank")
	private EmployerCategory employerCategory;
	
	@NotBlank(message = "Employer Grade can not be blank")
	@Enumerated(EnumType.STRING)
	private EmployeGrade employergrade;
	
	@NotBlank(message = "Employer address can not be blank")
	private String address;
	
	@NotBlank(message = "Country name can not be blank")
	private String country;
	
	@NotBlank(message = "RM name can not be blank")
	private String rmName;
	
	@NotBlank(message = "Mobile no can not be blank")
	@Pattern(regexp = "^[6-9]\\d{9}$", message = "Invalid Indian mobile number")
	private String mobileNo;
	
	@NotBlank(message = "Email can not be blank")
	@Pattern(
		    regexp = "^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.com$",
		    message = "Only .com email addresses are allowed"
		)
	private String email;
	
	@Positive(message="Revenue amount must be positive")
	private Long revenue;
	
	@Positive(message="Profit amount must be positive")
	private Long profit;
	
	@Size(min = 0,message="debt amount must be positive or zero")
	private Long debt;
	
	@Size(min = 0,message="noOfEmployees amount must be positive or zero")
	private Long noOfEmployees;
	
	@Size(min = 0,message="noOfEmployeesEliigibleForLoan amount must be positive or zero")
	private Long noOfEmployeesEliigibleForLone;
	
	@Size(min = 0,message="maxLoanAmountPerEmployee  must be positive or zero")
	private Long maxLoanAmountPerEmployee;
	
	@Size(min = 0,message="maxLoanAmount must be positive or zero")
	private Long maxLoanAmount;
	
	@Size(min=0,max=100, message = "npa must be between 0-100")
	private Double npa;
	
	@Size(min=0,max=100, message = "deliquency must be between 0-100")
	private Double deliquency;
	
	@NotBlank(message = "approvedGrade cannot be blank")
	private EmployeGrade approvedGrade;
	
	@NotBlank(message = "application stage can not be blank")
	private ApplicationStage stage;
	
}
